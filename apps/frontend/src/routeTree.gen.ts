/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from "@tanstack/react-router";

// Import Routes

import { Route as rootRoute } from "./routes/__root";
import { Route as BedsBedIdImport } from "./routes/beds/$bedId";

// Create Virtual Routes

const IndexLazyImport = createFileRoute("/")();
const SeedsIndexLazyImport = createFileRoute("/seeds/")();
const BedsIndexLazyImport = createFileRoute("/beds/")();
const SeedsSeedIdLazyImport = createFileRoute("/seeds/$seedId")();

// Create/Update Routes

const IndexLazyRoute = IndexLazyImport.update({
  id: "/",
  path: "/",
  getParentRoute: () => rootRoute,
} as any).lazy(() => import("./routes/index.lazy").then((d) => d.Route));

const SeedsIndexLazyRoute = SeedsIndexLazyImport.update({
  id: "/seeds/",
  path: "/seeds/",
  getParentRoute: () => rootRoute,
} as any).lazy(() => import("./routes/seeds/index.lazy").then((d) => d.Route));

const BedsIndexLazyRoute = BedsIndexLazyImport.update({
  id: "/beds/",
  path: "/beds/",
  getParentRoute: () => rootRoute,
} as any).lazy(() => import("./routes/beds/index.lazy").then((d) => d.Route));

const SeedsSeedIdLazyRoute = SeedsSeedIdLazyImport.update({
  id: "/seeds/$seedId",
  path: "/seeds/$seedId",
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import("./routes/seeds/$seedId.lazy").then((d) => d.Route),
);

const BedsBedIdRoute = BedsBedIdImport.update({
  id: "/beds/$bedId",
  path: "/beds/$bedId",
  getParentRoute: () => rootRoute,
} as any);

// Populate the FileRoutesByPath interface

declare module "@tanstack/react-router" {
  interface FileRoutesByPath {
    "/": {
      id: "/";
      path: "/";
      fullPath: "/";
      preLoaderRoute: typeof IndexLazyImport;
      parentRoute: typeof rootRoute;
    };
    "/beds/$bedId": {
      id: "/beds/$bedId";
      path: "/beds/$bedId";
      fullPath: "/beds/$bedId";
      preLoaderRoute: typeof BedsBedIdImport;
      parentRoute: typeof rootRoute;
    };
    "/seeds/$seedId": {
      id: "/seeds/$seedId";
      path: "/seeds/$seedId";
      fullPath: "/seeds/$seedId";
      preLoaderRoute: typeof SeedsSeedIdLazyImport;
      parentRoute: typeof rootRoute;
    };
    "/beds/": {
      id: "/beds/";
      path: "/beds";
      fullPath: "/beds";
      preLoaderRoute: typeof BedsIndexLazyImport;
      parentRoute: typeof rootRoute;
    };
    "/seeds/": {
      id: "/seeds/";
      path: "/seeds";
      fullPath: "/seeds";
      preLoaderRoute: typeof SeedsIndexLazyImport;
      parentRoute: typeof rootRoute;
    };
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  "/": typeof IndexLazyRoute;
  "/beds/$bedId": typeof BedsBedIdRoute;
  "/seeds/$seedId": typeof SeedsSeedIdLazyRoute;
  "/beds": typeof BedsIndexLazyRoute;
  "/seeds": typeof SeedsIndexLazyRoute;
}

export interface FileRoutesByTo {
  "/": typeof IndexLazyRoute;
  "/beds/$bedId": typeof BedsBedIdRoute;
  "/seeds/$seedId": typeof SeedsSeedIdLazyRoute;
  "/beds": typeof BedsIndexLazyRoute;
  "/seeds": typeof SeedsIndexLazyRoute;
}

export interface FileRoutesById {
  __root__: typeof rootRoute;
  "/": typeof IndexLazyRoute;
  "/beds/$bedId": typeof BedsBedIdRoute;
  "/seeds/$seedId": typeof SeedsSeedIdLazyRoute;
  "/beds/": typeof BedsIndexLazyRoute;
  "/seeds/": typeof SeedsIndexLazyRoute;
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath;
  fullPaths: "/" | "/beds/$bedId" | "/seeds/$seedId" | "/beds" | "/seeds";
  fileRoutesByTo: FileRoutesByTo;
  to: "/" | "/beds/$bedId" | "/seeds/$seedId" | "/beds" | "/seeds";
  id:
    | "__root__"
    | "/"
    | "/beds/$bedId"
    | "/seeds/$seedId"
    | "/beds/"
    | "/seeds/";
  fileRoutesById: FileRoutesById;
}

export interface RootRouteChildren {
  IndexLazyRoute: typeof IndexLazyRoute;
  BedsBedIdRoute: typeof BedsBedIdRoute;
  SeedsSeedIdLazyRoute: typeof SeedsSeedIdLazyRoute;
  BedsIndexLazyRoute: typeof BedsIndexLazyRoute;
  SeedsIndexLazyRoute: typeof SeedsIndexLazyRoute;
}

const rootRouteChildren: RootRouteChildren = {
  IndexLazyRoute: IndexLazyRoute,
  BedsBedIdRoute: BedsBedIdRoute,
  SeedsSeedIdLazyRoute: SeedsSeedIdLazyRoute,
  BedsIndexLazyRoute: BedsIndexLazyRoute,
  SeedsIndexLazyRoute: SeedsIndexLazyRoute,
};

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>();

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/beds/$bedId",
        "/seeds/$seedId",
        "/beds/",
        "/seeds/"
      ]
    },
    "/": {
      "filePath": "index.lazy.tsx"
    },
    "/beds/$bedId": {
      "filePath": "beds/$bedId.tsx"
    },
    "/seeds/$seedId": {
      "filePath": "seeds/$seedId.lazy.tsx"
    },
    "/beds/": {
      "filePath": "beds/index.lazy.tsx"
    },
    "/seeds/": {
      "filePath": "seeds/index.lazy.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
